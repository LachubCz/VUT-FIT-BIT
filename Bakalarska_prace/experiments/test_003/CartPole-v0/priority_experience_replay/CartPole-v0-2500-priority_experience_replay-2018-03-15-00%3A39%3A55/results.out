[33mWARN: gym.spaces.Box autodetected dtype as <class 'numpy.float32'>. Please provide explicit dtype.[0m
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_1 (Dense)              (None, 32)                160       
_________________________________________________________________
dense_2 (Dense)              (None, 16)                528       
_________________________________________________________________
dense_3 (Dense)              (None, 2)                 34        
=================================================================
Total params: 722
Trainable params: 722
Non-trainable params: 0
_________________________________________________________________
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_4 (Dense)              (None, 32)                160       
_________________________________________________________________
dense_5 (Dense)              (None, 16)                528       
_________________________________________________________________
dense_6 (Dense)              (None, 2)                 34        
=================================================================
Total params: 722
Trainable params: 722
Non-trainable params: 0
_________________________________________________________________
Episode: 0/2500, epsilon: 1.0, score: 22.0
Episode: 1/2500, epsilon: 1.0, score: 9.0
Episode: 2/2500, epsilon: 1.0, score: 8.0
Episode: 3/2500, epsilon: 1.0, score: 10.0
Episode: 4/2500, epsilon: 1.0, score: 8.0
Episode: 5/2500, epsilon: 1.0, score: 10.0
Episode: 6/2500, epsilon: 1.0, score: 9.0
Episode: 7/2500, epsilon: 1.0, score: 9.0
Episode: 8/2500, epsilon: 1.0, score: 9.0
Episode: 9/2500, epsilon: 1.0, score: 12.0
Episode: 10/2500, epsilon: 0.99, score: 12.0
Episode: 11/2500, epsilon: 0.99, score: 60.0
Episode: 12/2500, epsilon: 0.99, score: 32.0
Episode: 13/2500, epsilon: 0.99, score: 31.0
Episode: 14/2500, epsilon: 0.99, score: 56.0
Episode: 15/2500, epsilon: 0.99, score: 95.0
Episode: 16/2500, epsilon: 0.99, score: 25.0
Episode: 17/2500, epsilon: 0.99, score: 39.0
Episode: 18/2500, epsilon: 0.99, score: 39.0
Episode: 19/2500, epsilon: 0.99, score: 30.0
Episode: 20/2500, epsilon: 0.99, score: 43.0
Episode: 21/2500, epsilon: 0.99, score: 108.0
Episode: 22/2500, epsilon: 0.99, score: 75.0
Episode: 23/2500, epsilon: 0.99, score: 105.0
Episode: 24/2500, epsilon: 0.99, score: 171.0
Episode: 25/2500, epsilon: 0.99, score: 120.0
Episode: 26/2500, epsilon: 0.99, score: 169.0
Episode: 27/2500, epsilon: 0.99, score: 179.0
Episode: 28/2500, epsilon: 0.99, score: 75.0
Episode: 29/2500, epsilon: 0.99, score: 186.0
Episode: 30/2500, epsilon: 0.99, score: 177.0
Episode: 31/2500, epsilon: 0.99, score: 175.0
Episode: 32/2500, epsilon: 0.99, score: 200.0
Task solved after 32 episodes with score 197.87.
